default: &default
  adapter: postgresql
  connect_timeout: <%= AppConf.done_db_timeout_seconds.to_i * 1000 %>
  encoding: unicode
  host: <%= AppConf.done_db_host %>
  password: <%= AppConf.done_db_password %>
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= AppConf.rails_max_threads.to_i %>
  read_timeout: <%= AppConf.done_db_timeout_seconds.to_i * 1000 %>
  reconnect: true
  timeout: <%= AppConf.done_db_timeout_seconds.to_i * 1000 %>
  username: <%= AppConf.done_db_username %>
  variables:
    statement_timeout: <%= AppConf.done_db_timeout_seconds.to_i * 1000 %>

development: &solid_environment
  primary: &primary_development
    <<: *default
    database: <%= AppConf.done_db_name %>
  cable:
    <<: *primary_development
    database: <%= "#{AppConf.done_db_name}_cable" %>
    migrations_paths: db/cable_migrate
  cache:
    <<: *primary_development
    database: <%= "#{AppConf.done_db_name}_cache" %>
    migrations_paths: db/cache_migrate
  queue:
    <<: *primary_development
    database: <%= "#{AppConf.done_db_name}_queue" %>
    migrations_paths: db/queue_migrate
    pool: <%= AppConf.rails_max_threads.to_i + AppConf.solid_queue_threads.to_i %> # For details on connection pooling, see Rails configuration guide / https://guides.rubyonrails.org/configuring.html#database-pooling

test:
  primary: &primary_test
    <<: *default
    # unfortunately necessary, as some `rake db:` commands work against dev & test env
    database: <%= AppConf.done_db_name_test %>
  cache:
    <<: *primary_test
    database: <%= "#{AppConf.done_db_name_test}_cache" %>
    migrations_paths: db/cache_migrate
  queue:
    <<: *primary_test
    database: <%= "#{AppConf.done_db_name_test}_queue" %>
    migrations_paths: db/queue_migrate

production:
  <<: *solid_environment
